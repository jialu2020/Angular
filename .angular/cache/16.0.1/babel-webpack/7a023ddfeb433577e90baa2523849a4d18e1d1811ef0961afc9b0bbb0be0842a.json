{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { take, exhaustMap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nclass AuthInterceptorService {\n  constructor(authService) {\n    this.authService = authService;\n  }\n  intercept(req, next) {\n    return this.authService.user.pipe(take(1), exhaustMap(user => {\n      if (!user) {\n        return next.handle(req);\n      }\n      const modifiedReq = req.clone({\n        params: new HttpParams().set('auth', user.token)\n      });\n      return next.handle(modifiedReq);\n    }));\n  }\n}\nAuthInterceptorService.ɵfac = function AuthInterceptorService_Factory(t) {\n  return new (t || AuthInterceptorService)(i0.ɵɵinject(i1.AuthService));\n};\nAuthInterceptorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthInterceptorService,\n  factory: AuthInterceptorService.ɵfac\n});\nexport { AuthInterceptorService };","map":{"version":3,"names":["HttpParams","take","exhaustMap","AuthInterceptorService","constructor","authService","intercept","req","next","user","pipe","handle","modifiedReq","clone","params","set","token","i0","ɵɵinject","i1","AuthService","factory","ɵfac"],"sources":["C:\\Users\\jiapl\\Documents\\GitHub\\Angular\\src\\app\\auth\\auth-interceptor.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport {\r\n    HttpInterceptor,\r\n    HttpRequest,\r\n    HttpHandler,\r\n    HttpParams\r\n} from '@angular/common/http';\r\nimport { take, exhaustMap } from 'rxjs/operators';\r\n\r\nimport { AuthService } from './auth.service';\r\n\r\n@Injectable()\r\nexport class AuthInterceptorService implements HttpInterceptor {\r\n    constructor(private authService: AuthService) {}\r\n\r\n    intercept(req: HttpRequest<any>, next: HttpHandler) {\r\n        return this.authService.user.pipe(\r\n            take(1),\r\n            exhaustMap(user => {\r\n                if (!user) {\r\n                    return next.handle(req);\r\n                }\r\n                const modifiedReq = req.clone({\r\n                    params: new HttpParams().set('auth', user.token)\r\n                });\r\n                return next.handle(modifiedReq);\r\n            })\r\n        );\r\n    }\r\n}\r\n"],"mappings":"AACA,SAIIA,UAAU,QACP,sBAAsB;AAC7B,SAASC,IAAI,EAAEC,UAAU,QAAQ,gBAAgB;;;AAIjD,MACaC,sBAAsB;EAC/BC,YAAoBC,WAAwB;IAAxB,KAAAA,WAAW,GAAXA,WAAW;EAAgB;EAE/CC,SAASA,CAACC,GAAqB,EAAEC,IAAiB;IAC9C,OAAO,IAAI,CAACH,WAAW,CAACI,IAAI,CAACC,IAAI,CAC7BT,IAAI,CAAC,CAAC,CAAC,EACPC,UAAU,CAACO,IAAI,IAAG;MACd,IAAI,CAACA,IAAI,EAAE;QACP,OAAOD,IAAI,CAACG,MAAM,CAACJ,GAAG,CAAC;;MAE3B,MAAMK,WAAW,GAAGL,GAAG,CAACM,KAAK,CAAC;QAC1BC,MAAM,EAAE,IAAId,UAAU,EAAE,CAACe,GAAG,CAAC,MAAM,EAAEN,IAAI,CAACO,KAAK;OAClD,CAAC;MACF,OAAOR,IAAI,CAACG,MAAM,CAACC,WAAW,CAAC;IACnC,CAAC,CAAC,CACL;EACL;;AAhBST,sBAAsB,C;mBAAtBA,sBAAsB,EAAAc,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA;AAAA;AAAtBjB,sBAAsB,C;SAAtBA,sBAAsB;EAAAkB,OAAA,EAAtBlB,sBAAsB,CAAAmB;AAAA;SAAtBnB,sBAAsB"},"metadata":{},"sourceType":"module","externalDependencies":[]}