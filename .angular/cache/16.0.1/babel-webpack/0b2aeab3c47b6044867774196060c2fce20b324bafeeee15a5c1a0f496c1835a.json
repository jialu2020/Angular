{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormArray, FormControl, FormGroup } from \"@angular/forms\";\nlet RecipeEditComponent = class RecipeEditComponent {\n  constructor(route, recipeS) {\n    this.route = route;\n    this.recipeS = recipeS;\n    this.editMode = false;\n    this.oncancel = oncancel;\n  }\n  ngOnInit() {\n    this.route.params.subscribe(para => {\n      this.id = +para['id'];\n      this.editMode = para['id'] != null;\n      /* to check if there is an id in the params, if not, that means we are in newMode. */\n      console.log('the current need to edit id is ' + this.id);\n      console.log('the current Mode is editMode ? ' + this.editMode);\n      this.initForm();\n    });\n    console.log('controls');\n    console.log(this.getControls());\n  }\n  initForm() {\n    let recipeName = '';\n    let recipeImage = '';\n    let recipeDescription = '';\n    let recipeIngredients = new FormArray([]);\n    if (this.editMode) {\n      const recipe = this.recipeS.getRecipesById(this.id);\n      recipeName = recipe.name;\n      recipeImage = recipe.imagePath;\n      recipeDescription = recipe.description;\n      if (recipe['ingredients']) {\n        for (let ingredient of recipe.ingredients) {\n          recipeIngredients.push(new FormGroup({\n            'ingredientName': new FormControl(ingredient.name),\n            'ingredientAmount': new FormControl(ingredient.amount)\n          }));\n        }\n      }\n    }\n    this.recipeForm = new FormGroup({\n      'name': new FormControl(recipeName),\n      'image': new FormControl(recipeImage),\n      'description': new FormControl(recipeDescription),\n      'ingredients': recipeIngredients\n    });\n    console.log(this.recipeForm);\n  }\n  getControls() {\n    return this.recipeForm.get('ingredients').controls;\n  }\n  onSubmit() {}\n  onCancel() {\n    this.recipeForm.reset();\n    this.editMode = false;\n  }\n};\nRecipeEditComponent = __decorate([Component({\n  selector: 'app-recipe-edit',\n  templateUrl: './recipe-edit.component.html',\n  styleUrls: ['./recipe-edit.component.css']\n})], RecipeEditComponent);\nexport { RecipeEditComponent };","map":{"version":3,"names":["Component","FormArray","FormControl","FormGroup","RecipeEditComponent","constructor","route","recipeS","editMode","oncancel","ngOnInit","params","subscribe","para","id","console","log","initForm","getControls","recipeName","recipeImage","recipeDescription","recipeIngredients","recipe","getRecipesById","name","imagePath","description","ingredient","ingredients","push","amount","recipeForm","get","controls","onSubmit","onCancel","reset","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\jiapl\\Documents\\GitHub\\Angular\\src\\app\\recipes\\recipe-edit\\recipe-edit.component.ts"],"sourcesContent":["import {Component, OnInit, resolveForwardRef} from '@angular/core';\r\nimport {ActivatedRoute, Params} from \"@angular/router\";\r\nimport {FormArray, FormControl, FormGroup} from \"@angular/forms\";\r\nimport {RecipeService} from \"../recipe.service\";\r\n\r\n@Component({\r\n  selector: 'app-recipe-edit',\r\n  templateUrl: './recipe-edit.component.html',\r\n  styleUrls: ['./recipe-edit.component.css']\r\n})\r\nexport class RecipeEditComponent implements OnInit{\r\n\r\n  id : number;\r\n  editMode = false;\r\n  recipeForm : FormGroup;\r\n\r\n  constructor(private route : ActivatedRoute , private recipeS: RecipeService) {\r\n  }\r\n  ngOnInit(): void {\r\n    this.route.params.subscribe(\r\n        (para : Params) => {\r\n          this.id = +para['id'];\r\n          this.editMode = para['id']!=null;\r\n         /* to check if there is an id in the params, if not, that means we are in newMode. */\r\n          console.log('the current need to edit id is ' + this.id)\r\n            console.log('the current Mode is editMode ? ' + this.editMode)\r\n\r\n            this.initForm();\r\n        }\r\n    );\r\nconsole.log('controls')\r\nconsole.log(this.getControls())\r\n  }\r\n\r\n  private initForm(){\r\n    let recipeName = '';\r\n    let recipeImage = '';\r\n    let recipeDescription = '';\r\n    let recipeIngredients = new FormArray([]);\r\n    if(this.editMode){\r\n        const recipe = this.recipeS.getRecipesById(this.id);\r\n        recipeName = recipe.name;\r\n        recipeImage = recipe.imagePath;\r\n        recipeDescription = recipe.description;\r\n\r\n\r\n        if(recipe['ingredients']){\r\n            for(let ingredient of recipe.ingredients){\r\n                recipeIngredients.push(\r\n                    new FormGroup(\r\n                        {\r\n                            'ingredientName':new FormControl(ingredient.name),\r\n                            'ingredientAmount':new FormControl(ingredient.amount)\r\n                        }) );\r\n                }\r\n\r\n        }\r\n    }\r\n      this.recipeForm = new FormGroup({\r\n          'name' : new FormControl(recipeName),\r\n          'image' : new FormControl(recipeImage),\r\n          'description' : new FormControl(recipeDescription),\r\n          'ingredients': recipeIngredients\r\n\r\n      })\r\n\r\n      console.log(this.recipeForm)\r\n   }\r\n    getControls() {\r\n        return (<FormArray>this.recipeForm.get('ingredients')).controls;\r\n    }\r\n    onSubmit(){\r\n\r\n    }\r\n    onCancel(){\r\n      this.recipeForm.reset();\r\n      this.editMode = false;\r\n\r\n    }\r\n\r\n    protected readonly oncancel = oncancel;\r\n}\r\n"],"mappings":";AAAA,SAAQA,SAAS,QAAkC,eAAe;AAElE,SAAQC,SAAS,EAAEC,WAAW,EAAEC,SAAS,QAAO,gBAAgB;AAQhE,IAAaC,mBAAmB,GAAhC,MAAaA,mBAAmB;EAM9BC,YAAoBC,KAAsB,EAAWC,OAAsB;IAAvD,KAAAD,KAAK,GAALA,KAAK;IAA4B,KAAAC,OAAO,GAAPA,OAAO;IAH5D,KAAAC,QAAQ,GAAG,KAAK;IAmEK,KAAAC,QAAQ,GAAGA,QAAQ;EA/DxC;EACAC,QAAQA,CAAA;IACN,IAAI,CAACJ,KAAK,CAACK,MAAM,CAACC,SAAS,CACtBC,IAAa,IAAI;MAChB,IAAI,CAACC,EAAE,GAAG,CAACD,IAAI,CAAC,IAAI,CAAC;MACrB,IAAI,CAACL,QAAQ,GAAGK,IAAI,CAAC,IAAI,CAAC,IAAE,IAAI;MACjC;MACCE,OAAO,CAACC,GAAG,CAAC,iCAAiC,GAAG,IAAI,CAACF,EAAE,CAAC;MACtDC,OAAO,CAACC,GAAG,CAAC,iCAAiC,GAAG,IAAI,CAACR,QAAQ,CAAC;MAE9D,IAAI,CAACS,QAAQ,EAAE;IACnB,CAAC,CACJ;IACLF,OAAO,CAACC,GAAG,CAAC,UAAU,CAAC;IACvBD,OAAO,CAACC,GAAG,CAAC,IAAI,CAACE,WAAW,EAAE,CAAC;EAC7B;EAEQD,QAAQA,CAAA;IACd,IAAIE,UAAU,GAAG,EAAE;IACnB,IAAIC,WAAW,GAAG,EAAE;IACpB,IAAIC,iBAAiB,GAAG,EAAE;IAC1B,IAAIC,iBAAiB,GAAG,IAAIrB,SAAS,CAAC,EAAE,CAAC;IACzC,IAAG,IAAI,CAACO,QAAQ,EAAC;MACb,MAAMe,MAAM,GAAG,IAAI,CAAChB,OAAO,CAACiB,cAAc,CAAC,IAAI,CAACV,EAAE,CAAC;MACnDK,UAAU,GAAGI,MAAM,CAACE,IAAI;MACxBL,WAAW,GAAGG,MAAM,CAACG,SAAS;MAC9BL,iBAAiB,GAAGE,MAAM,CAACI,WAAW;MAGtC,IAAGJ,MAAM,CAAC,aAAa,CAAC,EAAC;QACrB,KAAI,IAAIK,UAAU,IAAIL,MAAM,CAACM,WAAW,EAAC;UACrCP,iBAAiB,CAACQ,IAAI,CAClB,IAAI3B,SAAS,CACT;YACI,gBAAgB,EAAC,IAAID,WAAW,CAAC0B,UAAU,CAACH,IAAI,CAAC;YACjD,kBAAkB,EAAC,IAAIvB,WAAW,CAAC0B,UAAU,CAACG,MAAM;WACvD,CAAC,CAAE;;;;IAKtB,IAAI,CAACC,UAAU,GAAG,IAAI7B,SAAS,CAAC;MAC5B,MAAM,EAAG,IAAID,WAAW,CAACiB,UAAU,CAAC;MACpC,OAAO,EAAG,IAAIjB,WAAW,CAACkB,WAAW,CAAC;MACtC,aAAa,EAAG,IAAIlB,WAAW,CAACmB,iBAAiB,CAAC;MAClD,aAAa,EAAEC;KAElB,CAAC;IAEFP,OAAO,CAACC,GAAG,CAAC,IAAI,CAACgB,UAAU,CAAC;EAC/B;EACCd,WAAWA,CAAA;IACP,OAAmB,IAAI,CAACc,UAAU,CAACC,GAAG,CAAC,aAAa,CAAE,CAACC,QAAQ;EACnE;EACAC,QAAQA,CAAA,GAER;EACAC,QAAQA,CAAA;IACN,IAAI,CAACJ,UAAU,CAACK,KAAK,EAAE;IACvB,IAAI,CAAC7B,QAAQ,GAAG,KAAK;EAEvB;CAGH;AAvEYJ,mBAAmB,GAAAkC,UAAA,EAL/BtC,SAAS,CAAC;EACTuC,QAAQ,EAAE,iBAAiB;EAC3BC,WAAW,EAAE,8BAA8B;EAC3CC,SAAS,EAAE,CAAC,6BAA6B;CAC1C,CAAC,C,EACWrC,mBAAmB,CAuE/B;SAvEYA,mBAAmB"},"metadata":{},"sourceType":"module","externalDependencies":[]}