{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../shared/data-storage.service\";\nimport * as i2 from \"./recipe.service\";\nclass RecipesResolverService {\n  constructor(ds, rs) {\n    this.ds = ds;\n    this.rs = rs;\n  }\n  resolve(route, state) {\n    let recipesFromHttp;\n    this.ds.fetchRecipes().subscribe(recipes => {\n      recipesFromHttp = recipes;\n    });\n    const recipesFromService = this.rs.getRecipes();\n    if (recipesFromHttp = recipesFromService) {\n      return;\n      //这里的recipes是前端有没有添加新的recipe\n    } else {\n      return recipesFromService;\n    }\n    //fetch the new recipice from the serve\n  }\n}\n\nRecipesResolverService.ɵfac = function RecipesResolverService_Factory(t) {\n  return new (t || RecipesResolverService)(i0.ɵɵinject(i1.DataStorageService), i0.ɵɵinject(i2.RecipeService));\n};\nRecipesResolverService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: RecipesResolverService,\n  factory: RecipesResolverService.ɵfac,\n  providedIn: 'root'\n});\nexport { RecipesResolverService };","map":{"version":3,"names":["RecipesResolverService","constructor","ds","rs","resolve","route","state","recipesFromHttp","fetchRecipes","subscribe","recipes","recipesFromService","getRecipes","i0","ɵɵinject","i1","DataStorageService","i2","RecipeService","factory","ɵfac","providedIn"],"sources":["C:\\Users\\jiapl\\Documents\\GitHub\\Angular\\src\\app\\recipes\\recipes-resolver.service.ts"],"sourcesContent":["import {Injectable} from \"@angular/core\";\r\nimport { ActivatedRouteSnapshot, Resolve, RouterStateSnapshot} from \"@angular/router\";\r\nimport {Recipe} from \"./recipe.model\";\r\nimport {DataStorageService} from \"../shared/data-storage.service\";\r\nimport {RecipeService} from \"./recipe.service\";\r\n\r\n\r\n@Injectable({providedIn:'root'})\r\nexport class RecipesResolverService implements Resolve<Recipe[]> {\r\n    constructor(private ds: DataStorageService,\r\n                private rs : RecipeService) {\r\n    }\r\n\r\nresolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\r\n    let recipesFromHttp;\r\n        this.ds.fetchRecipes().\r\n subscribe( (recipes)=>{\r\n      recipesFromHttp = recipes});\r\nconst recipesFromService  =this.rs.getRecipes();\r\n\r\n\r\nif(recipesFromHttp = recipesFromService){\r\n    return\r\n    //这里的recipes是前端有没有添加新的recipe\r\n}else{\r\n    return recipesFromService;\r\n}\r\n\r\n//fetch the new recipice from the serve\r\n\r\n\r\n\r\n}\r\n}\r\n"],"mappings":";;;AAOA,MACaA,sBAAsB;EAC/BC,YAAoBC,EAAsB,EACtBC,EAAkB;IADlB,KAAAD,EAAE,GAAFA,EAAE;IACF,KAAAC,EAAE,GAAFA,EAAE;EACtB;EAEJC,OAAOA,CAACC,KAA6B,EAAEC,KAA0B;IAC7D,IAAIC,eAAe;IACf,IAAI,CAACL,EAAE,CAACM,YAAY,EAAE,CAC7BC,SAAS,CAAGC,OAAO,IAAG;MACjBH,eAAe,GAAGG,OAAO;IAAA,CAAC,CAAC;IACjC,MAAMC,kBAAkB,GAAG,IAAI,CAACR,EAAE,CAACS,UAAU,EAAE;IAG/C,IAAGL,eAAe,GAAGI,kBAAkB,EAAC;MACpC;MACA;KACH,MAAI;MACD,OAAOA,kBAAkB;;IAG7B;EAIA;;;AAxBaX,sBAAsB,C;mBAAtBA,sBAAsB,EAAAa,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,kBAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,aAAA;AAAA;AAAtBlB,sBAAsB,C;SAAtBA,sBAAsB;EAAAmB,OAAA,EAAtBnB,sBAAsB,CAAAoB,IAAA;EAAAC,UAAA,EADX;AAAM;SACjBrB,sBAAsB"},"metadata":{},"sourceType":"module","externalDependencies":[]}