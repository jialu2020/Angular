{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from \"@angular/forms\";\nlet AuthComponent = class AuthComponent {\n  constructor(as, route) {\n    this.as = as;\n    this.route = route;\n    this.isLoading = false;\n    this.error = null;\n  }\n  onSwitchMode() {\n    this.isLoginMode = !this.isLoginMode;\n    console.log(this.isLoginMode);\n  }\n  ngOnInit() {\n    this.authForm = new FormGroup({\n      'email': new FormControl('max@test.com', [Validators.required, Validators.email]),\n      'password': new FormControl('', [Validators.required, Validators.minLength(1)])\n    });\n  }\n  onSubmit() {\n    if (this.authForm.valid) {\n      const email = this.authForm.get('email').value;\n      const password = this.authForm.value['password'];\n      let authObs;\n      this.isLoading = true;\n      //等效\n      if (this.isLoginMode) {\n        authObs = this.as.login(email, password);\n      } else {\n        authObs = this.as.signup(email, password);\n      }\n      authObs.subscribe(response => {\n        console.log(response);\n        this.isLoading = false;\n      }, errorRes => {\n        console.log(errorRes);\n        this.error = errorRes;\n        this.isLoading = false;\n      });\n      this.authForm.reset();\n    } else return;\n  }\n};\nAuthComponent = __decorate([Component({\n  selector: 'app-auth',\n  templateUrl: './auth.component.html',\n  styleUrls: ['./auth.component.css']\n})], AuthComponent);\nexport { AuthComponent };","map":{"version":3,"names":["Component","FormControl","FormGroup","Validators","AuthComponent","constructor","as","route","isLoading","error","onSwitchMode","isLoginMode","console","log","ngOnInit","authForm","required","email","minLength","onSubmit","valid","get","value","password","authObs","login","signup","subscribe","response","errorRes","reset","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\jiapl\\Documents\\GitHub\\Angular\\src\\app\\auth\\auth.component.ts"],"sourcesContent":["import {Component, OnInit} from '@angular/core';\r\nimport {FormControl, FormGroup, Validators} from \"@angular/forms\";\r\nimport {AuthResponseData, AuthService} from \"./auth.service\";\r\nimport {Observable} from \"rxjs\";\r\nimport {Route} from \"@angular/router\";\r\n\r\n@Component({\r\n  selector: 'app-auth',\r\n  templateUrl: './auth.component.html',\r\n  styleUrls: ['./auth.component.css']\r\n})\r\nexport class AuthComponent implements OnInit{\r\n    authForm : FormGroup;\r\n    isLoginMode : boolean;\r\n    isLoading = false;\r\n    error :string = null ;\r\n\r\n    constructor(private as : AuthService, private route : Route ) {\r\n    }\r\n\r\n\r\n\r\n\r\n   onSwitchMode(){\r\n     this.isLoginMode = !this.isLoginMode;\r\n     console.log(this.isLoginMode)\r\n   }\r\n\r\n    ngOnInit(): void {\r\n       this.authForm = new FormGroup(\r\n           {\r\n               'email': new FormControl('max@test.com',\r\n                   [Validators.required,Validators.email]),\r\n\r\n               'password' : new FormControl('' ,\r\n                   [Validators.required , Validators.minLength(1) ])\r\n           }\r\n       )\r\n\r\n    }\r\n\r\n    onSubmit(){\r\n\r\n       if(this.authForm.valid){\r\n\r\n           const email = this.authForm.get('email').value\r\n           const password = this.authForm.value['password'];\r\n           let authObs : Observable<AuthResponseData>\r\n\r\n           this.isLoading = true;\r\n           //等效\r\n\r\n           if(this.isLoginMode){\r\n               authObs = this.as.login(email,password);\r\n           }else {\r\n               authObs = this.as.signup(email,password);\r\n\r\n\r\n           }\r\n        authObs.subscribe(\r\n           response =>{\r\n               console.log(response)\r\n               this.isLoading= false;\r\n           },errorRes => {\r\n               console.log(errorRes);\r\n               this.error =errorRes;\r\n               this.isLoading = false;\r\n           });\r\n\r\n           this.authForm.reset();\r\n       }else return;\r\n\r\n\r\n    }\r\n}\r\n"],"mappings":";AAAA,SAAQA,SAAS,QAAe,eAAe;AAC/C,SAAQC,WAAW,EAAEC,SAAS,EAAEC,UAAU,QAAO,gBAAgB;AAUjE,IAAaC,aAAa,GAA1B,MAAaA,aAAa;EAMtBC,YAAoBC,EAAgB,EAAUC,KAAa;IAAvC,KAAAD,EAAE,GAAFA,EAAE;IAAwB,KAAAC,KAAK,GAALA,KAAK;IAHnD,KAAAC,SAAS,GAAG,KAAK;IACjB,KAAAC,KAAK,GAAW,IAAI;EAGpB;EAKDC,YAAYA,CAAA;IACV,IAAI,CAACC,WAAW,GAAG,CAAC,IAAI,CAACA,WAAW;IACpCC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACF,WAAW,CAAC;EAC/B;EAECG,QAAQA,CAAA;IACL,IAAI,CAACC,QAAQ,GAAG,IAAIb,SAAS,CACzB;MACI,OAAO,EAAE,IAAID,WAAW,CAAC,cAAc,EACnC,CAACE,UAAU,CAACa,QAAQ,EAACb,UAAU,CAACc,KAAK,CAAC,CAAC;MAE3C,UAAU,EAAG,IAAIhB,WAAW,CAAC,EAAE,EAC3B,CAACE,UAAU,CAACa,QAAQ,EAAGb,UAAU,CAACe,SAAS,CAAC,CAAC,CAAC,CAAE;KACvD,CACJ;EAEJ;EAEAC,QAAQA,CAAA;IAEL,IAAG,IAAI,CAACJ,QAAQ,CAACK,KAAK,EAAC;MAEnB,MAAMH,KAAK,GAAG,IAAI,CAACF,QAAQ,CAACM,GAAG,CAAC,OAAO,CAAC,CAACC,KAAK;MAC9C,MAAMC,QAAQ,GAAG,IAAI,CAACR,QAAQ,CAACO,KAAK,CAAC,UAAU,CAAC;MAChD,IAAIE,OAAsC;MAE1C,IAAI,CAAChB,SAAS,GAAG,IAAI;MACrB;MAEA,IAAG,IAAI,CAACG,WAAW,EAAC;QAChBa,OAAO,GAAG,IAAI,CAAClB,EAAE,CAACmB,KAAK,CAACR,KAAK,EAACM,QAAQ,CAAC;OAC1C,MAAK;QACFC,OAAO,GAAG,IAAI,CAAClB,EAAE,CAACoB,MAAM,CAACT,KAAK,EAACM,QAAQ,CAAC;;MAI/CC,OAAO,CAACG,SAAS,CACdC,QAAQ,IAAG;QACPhB,OAAO,CAACC,GAAG,CAACe,QAAQ,CAAC;QACrB,IAAI,CAACpB,SAAS,GAAE,KAAK;MACzB,CAAC,EAACqB,QAAQ,IAAG;QACTjB,OAAO,CAACC,GAAG,CAACgB,QAAQ,CAAC;QACrB,IAAI,CAACpB,KAAK,GAAEoB,QAAQ;QACpB,IAAI,CAACrB,SAAS,GAAG,KAAK;MAC1B,CAAC,CAAC;MAEF,IAAI,CAACO,QAAQ,CAACe,KAAK,EAAE;KACxB,MAAK;EAGT;CACH;AA/DY1B,aAAa,GAAA2B,UAAA,EALzB/B,SAAS,CAAC;EACTgC,QAAQ,EAAE,UAAU;EACpBC,WAAW,EAAE,uBAAuB;EACpCC,SAAS,EAAE,CAAC,sBAAsB;CACnC,CAAC,C,EACW9B,aAAa,CA+DzB;SA/DYA,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}