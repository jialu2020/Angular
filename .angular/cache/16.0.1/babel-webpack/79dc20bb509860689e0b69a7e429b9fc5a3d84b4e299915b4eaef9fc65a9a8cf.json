{"ast":null,"code":"import { BehaviorSubject, catchError, tap, throwError } from \"rxjs\";\nimport { User } from \"./user.model\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nclass AuthService {\n  //Subject（主题）是一种特殊类型的 Observable。\n  // 它既可以作为可观察对象发出数据，也可以充当观察者订阅其他可观察对象。\n  // Subject 具有多重角色，可以同时充当数据源和数据接收者。\n  // 当你使用 Subject 时，它可以被多个观察者订阅，\n  // 而 Observable 通常只能被单个观察者订阅。\n  // token : string = null;\n  // behaviorSubject 立刻发送值\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.user = new BehaviorSubject(null);\n  }\n  signup(email, password) {\n    return this.http.post('https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyA4hpXtrrJa6GwJQ_c6linszg4kK4FG5T0', {\n      email: email,\n      password: password,\n      returnSecureToken: true\n    }).pipe(catchError(this.handleError), tap(resData => {\n      this.handleAuthentication(resData.email, resData.localId, resData.idToken, +resData.expiresIn);\n    }));\n  }\n  login(email, password) {\n    return this.http.post('https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyA4hpXtrrJa6GwJQ_c6linszg4kK4FG5T0', {\n      email: email,\n      password: password,\n      returnSecureToken: true\n    }).pipe(catchError(this.handleError), tap(resData => {\n      this.handleAuthentication(resData.email, resData.localId, resData.idToken, +resData.expiresIn);\n    }));\n  }\n  logout() {\n    this.user.next(null);\n    this.router.navigate(['./auth']);\n  }\n  autoLogin() {\n    const userData = JSON.parse(localStorage.getItem('userData'));\n    if (!userData) {\n      return;\n    } else ;\n  }\n  handleAuthentication(email, userId, token, expiresIn) {\n    //handleAuthentication 方法的主要目的是在用户进行身份验证成功后，处理身份验证信息并创建用户对象\n    const expirationDate = new Date(new Date().getTime() + expiresIn * 1000);\n    const user = new User(email, userId, token, expirationDate);\n    console.log('current user is : ');\n    console.log(user);\n    this.user.next(user);\n    localStorage.setItem('userData', JSON.stringify(user));\n  }\n  handleError(errRes) {\n    let errorMessage = 'An unknow errer occured!';\n    console.log(errRes);\n    if (!errRes.error || !errRes.error.error) {\n      // throw error 抛出错误 告诉程序一个错误发生了\n      return throwError(() => {\n        new Error(errorMessage);\n        console.log('unknow error');\n      });\n    }\n    switch (errRes.error.error.message) {\n      case 'EMAIL_EXISTS':\n        errorMessage = 'this email exists already!';\n        console.log(errRes);\n        break;\n      default:\n        errorMessage = errRes.error.error.message;\n    }\n    return throwError(() => new Error(errorMessage));\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});\nexport { AuthService };","map":{"version":3,"names":["BehaviorSubject","catchError","tap","throwError","User","AuthService","constructor","http","router","user","signup","email","password","post","returnSecureToken","pipe","handleError","resData","handleAuthentication","localId","idToken","expiresIn","login","logout","next","navigate","autoLogin","userData","JSON","parse","localStorage","getItem","userId","token","expirationDate","Date","getTime","console","log","setItem","stringify","errRes","errorMessage","error","Error","message","i0","ɵɵinject","i1","HttpClient","i2","Router","factory","ɵfac","providedIn"],"sources":["C:\\Users\\jiapl\\Documents\\GitHub\\Angular\\src\\app\\auth\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport {HttpClient, HttpErrorResponse} from \"@angular/common/http\";\r\nimport {BehaviorSubject, catchError, tap, throwError} from \"rxjs\";\r\nimport {User} from \"./user.model\";\r\nimport {Router} from \"@angular/router\";\r\n\r\n\r\nexport interface AuthResponseData{\r\n  kind:string;\r\n  idToken: string;\r\n  email:string;\r\n  refreshToken:string;\r\n  expiresIn: string;\r\n  localId:string;\r\n  registered?:boolean;\r\n  //response data format\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n    user = new BehaviorSubject<User>(null);\r\n    //Subject（主题）是一种特殊类型的 Observable。\r\n    // 它既可以作为可观察对象发出数据，也可以充当观察者订阅其他可观察对象。\r\n    // Subject 具有多重角色，可以同时充当数据源和数据接收者。\r\n    // 当你使用 Subject 时，它可以被多个观察者订阅，\r\n    // 而 Observable 通常只能被单个观察者订阅。\r\n    // token : string = null;\r\n    // behaviorSubject 立刻发送值\r\n\r\n  constructor( private http : HttpClient ,\r\n               private router : Router) { }\r\n\r\n\r\n  signup(email:string,password:string){\r\n    return  this.http.post<AuthResponseData>('https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyA4hpXtrrJa6GwJQ_c6linszg4kK4FG5T0'\r\n    ,{\r\n            email : email,\r\n            password: password ,\r\n            returnSecureToken : true})\r\n        .pipe(catchError(this.handleError),\r\n        tap( resData => {\r\n            this.handleAuthentication(\r\n                    resData.email,\r\n                    resData.localId,\r\n                    resData.idToken,\r\n                    +resData.expiresIn);\r\n\r\n            }\r\n        ));\r\n  }\r\n\r\n    login(email: string, password: string) {\r\n        return this.http\r\n            .post<AuthResponseData>(\r\n                'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyA4hpXtrrJa6GwJQ_c6linszg4kK4FG5T0',\r\n                {\r\n                    email: email,\r\n                    password: password,\r\n                    returnSecureToken: true\r\n                }\r\n            )\r\n            .pipe(\r\n\r\n                catchError(this.handleError),\r\n                tap(resData => {\r\n                    this.handleAuthentication(\r\n                        resData.email,\r\n                        resData.localId,\r\n                        resData.idToken,\r\n                        +resData.expiresIn\r\n                    );\r\n                })\r\n            );\r\n    }\r\n\r\n\r\n    logout(){\r\n      this.user.next(null);\r\n        this.router.navigate(['./auth']);\r\n    }\r\n\r\n\r\n\r\n    autoLogin(){\r\n      const userData = JSON.parse(localStorage.getItem('userData'));\r\n      \r\n      if(!userData){\r\n          return;\r\n\r\n      }else\r\n    }\r\n\r\n\r\n    private  handleAuthentication (email: string, userId: string, token : string , expiresIn: number){\r\n        //handleAuthentication 方法的主要目的是在用户进行身份验证成功后，处理身份验证信息并创建用户对象\r\n\r\n        const expirationDate = new Date(new Date().getTime() + expiresIn * 1000);\r\n        const user =\r\n            new User(\r\n                email ,\r\n                userId,\r\n                token,\r\n                expirationDate);\r\n        console.log('current user is : ')\r\n        console.log(user)\r\n        this.user.next(user);\r\n        localStorage.setItem('userData' , JSON.stringify(user));\r\n    }\r\n\r\n  private handleError(errRes:HttpErrorResponse){\r\n      let errorMessage = 'An unknow errer occured!';\r\n      console.log(errRes)\r\n      if(!errRes.error || !errRes.error.error){\r\n          // throw error 抛出错误 告诉程序一个错误发生了\r\n          return throwError(()=>{\r\n              new Error(errorMessage);\r\n              console.log('unknow error')\r\n          });\r\n      }\r\n\r\n      switch (errRes.error.error.message){\r\n          case 'EMAIL_EXISTS':\r\n              errorMessage =  'this email exists already!';\r\n              console.log(errRes)\r\n              break;\r\n          default:\r\n              errorMessage = errRes.error.error.message;\r\n\r\n      }\r\n      return throwError(()=>new Error(errorMessage)\r\n\r\n      );\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}