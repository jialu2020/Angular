{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, EventEmitter, Output } from '@angular/core';\nlet HeaderComponent = class HeaderComponent {\n  constructor(ds, rs, as, router) {\n    this.ds = ds;\n    this.rs = rs;\n    this.as = as;\n    this.router = router;\n    this.featureSelected = new EventEmitter();\n    this.isAuthenticated = false;\n  }\n  /*onSelect(feature: string){\n    this.featureSelected.emit(feature);  //将feature这个string recipe/shopping-list发送到app\n  }*/\n  ngOnInit() {\n    this.rs.recipesChange.subscribe(recipes => {\n      this.recipes = recipes;\n      this.recipeAmount = this.recipes.length;\n      console.log('check it out');\n      console.log(this.recipes);\n      //总结一下这个方法。 本质上是获取到在service里的db的数据长度。\n      //因为recipeschange是一个subject 因此我们需订阅\n      //订阅到的是一个observable 格式 需要利用回调函数 获取内部的值\n      //获取到的值 通过双向绑定 在一个bootstrap的徽章上显示出来\n    });\n\n    this.userSub = this.as.user.subscribe(user => {\n      this.isAuthenticated = !user ? false : true;\n      //判断 如果有一个已验证的用户，则true，反之 false\n    });\n    //这段代码说明了 observable。subscribe()返回的是一个 subscription\n  }\n\n  onSaveData() {\n    this.ds.storeRecipes();\n  }\n  onFetchData() {\n    this.ds.fetchRecipes().subscribe();\n    console.log('click fetch');\n    console.log(this.recipes);\n  }\n  ngOnDestroy() {\n    this.userSub.unsubscribe();\n  }\n  onLogout() {\n    this.as.logout();\n    this.router.navigate('/');\n  }\n};\n__decorate([Output()], HeaderComponent.prototype, \"featureSelected\", void 0);\nHeaderComponent = __decorate([Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.css']\n})], HeaderComponent);\nexport { HeaderComponent };","map":{"version":3,"names":["Component","EventEmitter","Output","HeaderComponent","constructor","ds","rs","as","router","featureSelected","isAuthenticated","ngOnInit","recipesChange","subscribe","recipes","recipeAmount","length","console","log","userSub","user","onSaveData","storeRecipes","onFetchData","fetchRecipes","ngOnDestroy","unsubscribe","onLogout","logout","navigate","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\jiapl\\Documents\\GitHub\\Angular\\src\\app\\header\\header.component.ts"],"sourcesContent":["import {Component, EventEmitter, OnDestroy, OnInit, Output} from '@angular/core';\r\nimport {DataStorageService} from \"../shared/data-storage.service\";\r\nimport {RecipeService} from \"../recipes/recipe.service\";\r\nimport {Recipe} from \"../recipes/recipe.model\";\r\nimport {AuthService} from \"../auth/auth.service\";\r\nimport {Subscription} from \"rxjs\";\r\nimport {Route, RouterLink} from \"@angular/router\";\r\n\r\n@Component({\r\n  selector: 'app-header',\r\n  templateUrl: './header.component.html',\r\n  styleUrls: ['./header.component.css']\r\n})\r\nexport class HeaderComponent implements OnInit , OnDestroy{\r\n  @Output() featureSelected = new EventEmitter<string>();\r\n\r\n\r\n  constructor(private ds : DataStorageService ,\r\n              private rs : RecipeService,\r\n              private as : AuthService,\r\n              private router : Router) {\r\n  }\r\n\r\n  recipeAmount : number;\r\n  recipes : Recipe[];\r\n  private userSub : Subscription;\r\n  isAuthenticated = false;\r\n\r\n  /*onSelect(feature: string){\r\n    this.featureSelected.emit(feature);  //将feature这个string recipe/shopping-list发送到app\r\n  }*/\r\n\r\n  ngOnInit(){\r\n\r\n    this.rs.recipesChange.subscribe(\r\n        (recipes: Recipe[])  => {\r\n          this.recipes  = recipes;\r\n          this.recipeAmount = this.recipes.length;\r\n          console.log('check it out')\r\n          console.log(this.recipes)\r\n          //总结一下这个方法。 本质上是获取到在service里的db的数据长度。\r\n          //因为recipeschange是一个subject 因此我们需订阅\r\n          //订阅到的是一个observable 格式 需要利用回调函数 获取内部的值\r\n          //获取到的值 通过双向绑定 在一个bootstrap的徽章上显示出来\r\n    }\r\n    )\r\n    this.userSub = this.as.user.subscribe( user =>{\r\n      this.isAuthenticated = !user? false : true;\r\n      //判断 如果有一个已验证的用户，则true，反之 false\r\n\r\n    });\r\n    //这段代码说明了 observable。subscribe()返回的是一个 subscription\r\n\r\n\r\n\r\n\r\n  }\r\n\r\n  onSaveData(){\r\n  this.ds.storeRecipes();\r\n\r\n  }\r\n\r\n  onFetchData(){\r\n  this.ds.fetchRecipes().subscribe();\r\n  console.log('click fetch')\r\n    console.log(this.recipes)\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.userSub.unsubscribe();\r\n  }\r\n\r\n  onLogout(){\r\n    this.as.logout();\r\n    this.router.navigate('/')\r\n\r\n\r\n  }\r\n\r\n}\r\n"],"mappings":";AAAA,SAAQA,SAAS,EAAEC,YAAY,EAAqBC,MAAM,QAAO,eAAe;AAahF,IAAaC,eAAe,GAA5B,MAAaA,eAAe;EAI1BC,YAAoBC,EAAuB,EACvBC,EAAkB,EAClBC,EAAgB,EAChBC,MAAe;IAHf,KAAAH,EAAE,GAAFA,EAAE;IACF,KAAAC,EAAE,GAAFA,EAAE;IACF,KAAAC,EAAE,GAAFA,EAAE;IACF,KAAAC,MAAM,GAANA,MAAM;IANhB,KAAAC,eAAe,GAAG,IAAIR,YAAY,EAAU;IAYtD,KAAAS,eAAe,GAAG,KAAK;EALvB;EAOA;;;EAIAC,QAAQA,CAAA;IAEN,IAAI,CAACL,EAAE,CAACM,aAAa,CAACC,SAAS,CAC1BC,OAAiB,IAAK;MACrB,IAAI,CAACA,OAAO,GAAIA,OAAO;MACvB,IAAI,CAACC,YAAY,GAAG,IAAI,CAACD,OAAO,CAACE,MAAM;MACvCC,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;MAC3BD,OAAO,CAACC,GAAG,CAAC,IAAI,CAACJ,OAAO,CAAC;MACzB;MACA;MACA;MACA;IACN,CAAC,CACA;;IACD,IAAI,CAACK,OAAO,GAAG,IAAI,CAACZ,EAAE,CAACa,IAAI,CAACP,SAAS,CAAEO,IAAI,IAAG;MAC5C,IAAI,CAACV,eAAe,GAAG,CAACU,IAAI,GAAE,KAAK,GAAG,IAAI;MAC1C;IAEF,CAAC,CAAC;IACF;EAKF;;EAEAC,UAAUA,CAAA;IACV,IAAI,CAAChB,EAAE,CAACiB,YAAY,EAAE;EAEtB;EAEAC,WAAWA,CAAA;IACX,IAAI,CAAClB,EAAE,CAACmB,YAAY,EAAE,CAACX,SAAS,EAAE;IAClCI,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;IACxBD,OAAO,CAACC,GAAG,CAAC,IAAI,CAACJ,OAAO,CAAC;EAC3B;EAEAW,WAAWA,CAAA;IACT,IAAI,CAACN,OAAO,CAACO,WAAW,EAAE;EAC5B;EAEAC,QAAQA,CAAA;IACN,IAAI,CAACpB,EAAE,CAACqB,MAAM,EAAE;IAChB,IAAI,CAACpB,MAAM,CAACqB,QAAQ,CAAC,GAAG,CAAC;EAG3B;CAED;AAlEWC,UAAA,EAAT5B,MAAM,EAAE,C,uDAA8C;AAD5CC,eAAe,GAAA2B,UAAA,EAL3B9B,SAAS,CAAC;EACT+B,QAAQ,EAAE,YAAY;EACtBC,WAAW,EAAE,yBAAyB;EACtCC,SAAS,EAAE,CAAC,wBAAwB;CACrC,CAAC,C,EACW9B,eAAe,CAmE3B;SAnEYA,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}