{"ast":null,"code":"import { BehaviorSubject, catchError, tap, throwError } from \"rxjs\";\nimport { User } from \"./user.model\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass AuthService {\n  //Subject（主题）是一种特殊类型的 Observable。\n  // 它既可以作为可观察对象发出数据，也可以充当观察者订阅其他可观察对象。\n  // Subject 具有多重角色，可以同时充当数据源和数据接收者。\n  // 当你使用 Subject 时，它可以被多个观察者订阅，\n  // 而 Observable 通常只能被单个观察者订阅。\n  // token : string = null;\n  // behaviorSubject 立刻发送值\n  constructor(http) {\n    this.http = http;\n    this.user = new BehaviorSubject(null);\n  }\n  signup(email, password) {\n    return this.http.post('https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyA4hpXtrrJa6GwJQ_c6linszg4kK4FG5T0', {\n      email: email,\n      password: password,\n      returnSecureToken: true\n    }).pipe(catchError(this.handleError), tap(resData => {\n      this.handleAuthentication(resData.email, resData.localId, resData.idToken, +resData.expiresIn);\n    }));\n  }\n  login(email, password) {\n    return this.http.post('https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyA4hpXtrrJa6GwJQ_c6linszg4kK4FG5T0', {\n      email: email,\n      password: password,\n      returnSecureToken: true\n    }).pipe(catchError(this.handleError), tap(resData => {\n      this.handleAuthentication(resData.email, resData.localId, resData.idToken, +resData.expiresIn);\n    }));\n  }\n  handleAuthentication(email, userId, token, expiresIn) {\n    //handleAuthentication 方法的主要目的是在用户进行身份验证成功后，处理身份验证信息并创建用户对象\n    const expirationDate = new Date(new Date().getTime() + expiresIn * 1000);\n    const user = new User(email, userId, token, expirationDate);\n    console.log(user);\n    this.user.next(user);\n  }\n  handleError(errorRes) {\n    let errorMessage = 'An unknown error occurred!';\n    if (!errorRes.error || !errorRes.error.error) {\n      return throwError(errorMessage);\n    }\n    switch (errorRes.error.error.message) {\n      case 'EMAIL_EXISTS':\n        errorMessage = 'This email exists already';\n        break;\n      case 'EMAIL_NOT_FOUND':\n        errorMessage = 'This email does not exist.';\n        break;\n      case 'INVALID_PASSWORD':\n        errorMessage = 'This password is not correct.';\n        break;\n    }\n    return throwError(errorMessage);\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});\nexport { AuthService };","map":{"version":3,"names":["BehaviorSubject","catchError","tap","throwError","User","AuthService","constructor","http","user","signup","email","password","post","returnSecureToken","pipe","handleError","resData","handleAuthentication","localId","idToken","expiresIn","login","userId","token","expirationDate","Date","getTime","console","log","next","errorRes","errorMessage","error","message","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\jiapl\\Documents\\GitHub\\Angular\\src\\app\\auth\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport {HttpClient, HttpErrorResponse} from \"@angular/common/http\";\r\nimport {BehaviorSubject, catchError, tap, throwError} from \"rxjs\";\r\nimport {User} from \"./user.model\";\r\n\r\n\r\nexport interface AuthResponseData{\r\n  kind:string;\r\n  idToken: string;\r\n  email:string;\r\n  refreshToken:string;\r\n  expiresIn: string;\r\n  localId:string;\r\n  registered?:boolean;\r\n  //response data format\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n    user = new BehaviorSubject<User>(null);\r\n    //Subject（主题）是一种特殊类型的 Observable。\r\n    // 它既可以作为可观察对象发出数据，也可以充当观察者订阅其他可观察对象。\r\n    // Subject 具有多重角色，可以同时充当数据源和数据接收者。\r\n    // 当你使用 Subject 时，它可以被多个观察者订阅，\r\n    // 而 Observable 通常只能被单个观察者订阅。\r\n    // token : string = null;\r\n    // behaviorSubject 立刻发送值\r\n\r\n  constructor( private http : HttpClient) { }\r\n\r\n\r\n  signup(email:string,password:string){\r\n    return  this.http.post<AuthResponseData>('https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyA4hpXtrrJa6GwJQ_c6linszg4kK4FG5T0'\r\n    ,{\r\n            email : email,\r\n            password: password ,\r\n            returnSecureToken : true})\r\n        .pipe(catchError(this.handleError),\r\n        tap( resData => {\r\n            this.handleAuthentication(\r\n                    resData.email,\r\n                    resData.localId,\r\n                    resData.idToken,\r\n                    +resData.expiresIn);\r\n\r\n\r\n            }\r\n        ));\r\n  }\r\n\r\n\r\n  login(email:string,password:string){\r\n\r\n      return this.http.post<AuthResponseData>('https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyA4hpXtrrJa6GwJQ_c6linszg4kK4FG5T0',\r\n          {\r\n              email : email,\r\n              password: password ,\r\n              returnSecureToken : true\r\n          }\r\n          ).pipe(catchError(this.handleError)\r\n      ,tap( resData => {\r\n          this.handleAuthentication(\r\n              resData.email,\r\n              resData.localId,\r\n              resData.idToken,\r\n              +resData.expiresIn);\r\n\r\n\r\n      }));\r\n  }\r\n\r\n\r\n    private  handleAuthentication (email: string, userId: string, token : string , expiresIn: number){\r\n        //handleAuthentication 方法的主要目的是在用户进行身份验证成功后，处理身份验证信息并创建用户对象\r\n\r\n        const expirationDate = new Date(new Date().getTime() + expiresIn * 1000);\r\n        const user =\r\n            new User(\r\n                email ,\r\n                userId,\r\n                token,\r\n                expirationDate);\r\n        console.log(user)\r\n        this.user.next(user);\r\n    }\r\n\r\n    private handleError(errorRes: HttpErrorResponse) {\r\n        let errorMessage = 'An unknown error occurred!';\r\n        if (!errorRes.error || !errorRes.error.error) {\r\n            return throwError(errorMessage);\r\n        }\r\n        switch (errorRes.error.error.message) {\r\n            case 'EMAIL_EXISTS':\r\n                errorMessage = 'This email exists already';\r\n                break;\r\n            case 'EMAIL_NOT_FOUND':\r\n                errorMessage = 'This email does not exist.';\r\n                break;\r\n            case 'INVALID_PASSWORD':\r\n                errorMessage = 'This password is not correct.';\r\n                break;\r\n        }\r\n        return throwError(errorMessage);\r\n    }\r\n}\r\n"],"mappings":"AAEA,SAAQA,eAAe,EAAEC,UAAU,EAAEC,GAAG,EAAEC,UAAU,QAAO,MAAM;AACjE,SAAQC,IAAI,QAAO,cAAc;;;AAcjC,MAGaC,WAAW;EAEpB;EACA;EACA;EACA;EACA;EACA;EACA;EAEFC,YAAqBC,IAAiB;IAAjB,KAAAA,IAAI,GAAJA,IAAI;IATvB,KAAAC,IAAI,GAAG,IAAIR,eAAe,CAAO,IAAI,CAAC;EASE;EAG1CS,MAAMA,CAACC,KAAY,EAACC,QAAe;IACjC,OAAQ,IAAI,CAACJ,IAAI,CAACK,IAAI,CAAmB,uGAAuG,EAC/I;MACOF,KAAK,EAAGA,KAAK;MACbC,QAAQ,EAAEA,QAAQ;MAClBE,iBAAiB,EAAG;KAAK,CAAC,CAC7BC,IAAI,CAACb,UAAU,CAAC,IAAI,CAACc,WAAW,CAAC,EAClCb,GAAG,CAAEc,OAAO,IAAG;MACX,IAAI,CAACC,oBAAoB,CACjBD,OAAO,CAACN,KAAK,EACbM,OAAO,CAACE,OAAO,EACfF,OAAO,CAACG,OAAO,EACf,CAACH,OAAO,CAACI,SAAS,CAAC;IAG3B,CAAC,CACJ,CAAC;EACR;EAGAC,KAAKA,CAACX,KAAY,EAACC,QAAe;IAE9B,OAAO,IAAI,CAACJ,IAAI,CAACK,IAAI,CAAmB,mHAAmH,EACvJ;MACIF,KAAK,EAAGA,KAAK;MACbC,QAAQ,EAAEA,QAAQ;MAClBE,iBAAiB,EAAG;KACvB,CACA,CAACC,IAAI,CAACb,UAAU,CAAC,IAAI,CAACc,WAAW,CAAC,EACtCb,GAAG,CAAEc,OAAO,IAAG;MACZ,IAAI,CAACC,oBAAoB,CACrBD,OAAO,CAACN,KAAK,EACbM,OAAO,CAACE,OAAO,EACfF,OAAO,CAACG,OAAO,EACf,CAACH,OAAO,CAACI,SAAS,CAAC;IAG3B,CAAC,CAAC,CAAC;EACP;EAGWH,oBAAoBA,CAAEP,KAAa,EAAEY,MAAc,EAAEC,KAAc,EAAGH,SAAiB;IAC5F;IAEA,MAAMI,cAAc,GAAG,IAAIC,IAAI,CAAC,IAAIA,IAAI,EAAE,CAACC,OAAO,EAAE,GAAGN,SAAS,GAAG,IAAI,CAAC;IACxE,MAAMZ,IAAI,GACN,IAAIJ,IAAI,CACJM,KAAK,EACLY,MAAM,EACNC,KAAK,EACLC,cAAc,CAAC;IACvBG,OAAO,CAACC,GAAG,CAACpB,IAAI,CAAC;IACjB,IAAI,CAACA,IAAI,CAACqB,IAAI,CAACrB,IAAI,CAAC;EACxB;EAEQO,WAAWA,CAACe,QAA2B;IAC3C,IAAIC,YAAY,GAAG,4BAA4B;IAC/C,IAAI,CAACD,QAAQ,CAACE,KAAK,IAAI,CAACF,QAAQ,CAACE,KAAK,CAACA,KAAK,EAAE;MAC1C,OAAO7B,UAAU,CAAC4B,YAAY,CAAC;;IAEnC,QAAQD,QAAQ,CAACE,KAAK,CAACA,KAAK,CAACC,OAAO;MAChC,KAAK,cAAc;QACfF,YAAY,GAAG,2BAA2B;QAC1C;MACJ,KAAK,iBAAiB;QAClBA,YAAY,GAAG,4BAA4B;QAC3C;MACJ,KAAK,kBAAkB;QACnBA,YAAY,GAAG,+BAA+B;QAC9C;IAAM;IAEd,OAAO5B,UAAU,CAAC4B,YAAY,CAAC;EACnC;;AArFS1B,WAAW,C;mBAAXA,WAAW,EAAA6B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAXhC,WAAW,C;SAAXA,WAAW;EAAAiC,OAAA,EAAXjC,WAAW,CAAAkC,IAAA;EAAAC,UAAA,EAFV;AAAM;SAEPnC,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}